openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: HaakCo Dev Default Api
    url: https://dev.haak.co/api/v1
  - description: HaakCo Prod Default Api
    url: https://haak.co/api/v1
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HaakCo/HaakCo/1.0.2
info:
  version: "1.0.2"
  title: HaakCo APi
  description: >-
    HaakCo APi
  contact:
    email: contact@haak.co
security:
  - OAuth2:
      - read
      - write
paths:
  /me:
    get:
      summary: Current users details
      description: >-
        Current users details.
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - My User
        - User
  /me/companies:
    get:
      summary: Current users companies
      description: >-
        Current users companies.
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - My User
        - User
        - Company
  /me/permissions:
    get:
      summary: Current users permissions
      description: >-
        Current users permissions.
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - My User
        - User
        - Rights
  /me/roles:
    get:
      summary: Current users roles
      description: >-
        Current users roles.
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - My User
        - User
        - Rights
  /user/{user_uuid}/companies:
    get:
      summary: Get specific users companies
      description: >-
        Get specific users companies
      parameters:
        - in: path
          name: user_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - User
        - Company
  /user/{user_uuid}/image:
    post:
      summary: Update user image
      description: >-
        Update user image
      parameters:
        - in: path
          name: user_uuid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: Users image
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/png, image/jpeg
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - User
        - Image
  /user/{user_uuid}/permissions:
    get:
      summary: Get specific users permissions
      description: >-
        Get specific users permissions
      parameters:
        - in: path
          name: user_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - User
        - Rights
  /user/{user_uuid}/roles:
    get:
      summary: Get specific users roles
      description: >-
        Get specific users roles
      parameters:
        - in: path
          name: user_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - User
        - Rights
  /user/{user_uuid}:
    get:
      summary: Get specific users details
      description: >-
        Get specific users details
      parameters:
        - in: path
          name: user_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - User
    post:
      summary: Update user
      description: >-
        Update user image
      parameters:
        - in: path
          name: user_uuid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Users Name
                  type: string
                email:
                  description: Users Email
                  type: string
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - User
  /users:
    get:
      summary: Get all users
      description: >-
        Get all users
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - User
  /rights/permissions:
    get:
      summary: Get permission list
      description: >-
        Get permission list
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - Rights
  /rights/roles:
    get:
      summary: Get roles list
      description: >-
        Get roles list
      responses:
        '200':
          description: OK
      security:
        - OAuth2: [read, write]
      tags:
        - Rights
  /test/basic_system:
    get:
      summary: Test if server is up and DB and Redis connected
      description: >-
        Test if server is up and DB and Redis connected
      security: []
      responses:
        '200':
          description: OK
      tags:
        - Testing
  /login/register:
    post:
      summary: Register new user
      description: >-
        Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Users name
                  type: string
                email:
                  description: Users email
                  type: string
                password:
                  description: Users password
                  type: string
                password_confirmation:
                  description: Users password confirmation
                  type: string
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    description: Access Token
                    type: string
                  name:
                    description: User Name
                    type: string
                  uuid:
                    description: UUID
                    type: string
      tags:
        - Auth
  /login/password/forgot:
    post:
      summary: Request password reset token via email
      description: >-
        Request password reset token via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Users email
                  type: string
              required:
                - email
      security: []
      responses:
        '200':
          description: OK
      tags:
        - Auth
  /login/password/reset:
    post:
      summary: Reset password with token
      description: >-
        Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Users email
                  type: string
                token:
                  description: Reset token
                  type: string
                password:
                  description: New password
                  type: string
              required:
                - email
      security: []
      responses:
        '200':
          description: OK
      tags:
        - Auth
  /logout:
    get:
      summary: Logout and revoke tokens
      description: >-
        Logout and revoke tokens
      security: []
      responses:
        '200':
          description: OK
      tags:
        - Auth
components:
  schemas: {}
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: '/api/v1/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources
